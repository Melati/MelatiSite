// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.site.model.generated;


import java.sql.Date;
import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.NoSuchRowPoemException;
import org.melati.poem.Persistent;
import org.melati.poem.User;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.site.model.SiteDatabaseTables;
import org.paneris.melati.site.model.UploadedFileTable;
import org.paneris.melati.site.model.UploadedFileType;


/**
 * Melati POEM generated abstract base class for a <code>Persistent</code> 
 * <code>UploadedFile</code> Object.
 *
 * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
 */
public abstract class UploadedFileBase extends Persistent {


 /**
  * Retrieves the Database object.
  * 
  * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
  * @return the database
  */
  public SiteDatabaseTables getSiteDatabaseTables() {
    return (SiteDatabaseTables)getDatabase();
  }


 /**
  * Retrieves the  <code>UploadedFileTable</code> table 
  * which this <code>Persistent</code> is from.
  * 
  * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
  * @return the UploadedFileTable
  */
  public UploadedFileTable getUploadedFileTable() {
    return (UploadedFileTable)getTable();
  }

  private UploadedFileTable _getUploadedFileTable() {
    return (UploadedFileTable)getTable();
  }

  // Fields in this table 
 /**
  * type - The type of this file 
  */
  protected Integer type;
 /**
  * description - A description of the file 
  */
  protected String description;
 /**
  * size - The size of this file 
  */
  protected Integer size;
 /**
  * when - The date on which this file was uploaded 
  */
  protected Date when;
 /**
  * Uploaded By - The user who uploaded this file 
  */
  protected Integer uploadedby;
 /**
  * deleted - Whether this file been deleted or not 
  */
  protected Boolean deleted;
 /**
  * Display name - The layout's name 
  */
  protected String displayname;


 /**
  * Retrieves the <code>Type</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer type
  */
  public Integer getType_unsafe() {
    return type;
  }


 /**
  * Sets the <code>Type</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setType_unsafe(Integer cooked) {
    type = cooked;
  }

 /**
  * Retrieves the Table Row Object ID. 
  *
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @return the TROID as an <code>Integer</code> 
  */

  public Integer getTypeTroid()
      throws AccessPoemException {
    readLock();
    return getType_unsafe();
  }


 /**
  * Sets the Table Row Object ID. 
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param raw  a Table Row Object Id 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  */
  public void setTypeTroid(Integer raw)
      throws AccessPoemException {
    setType(raw == null ? null : 
        getSiteDatabaseTables().getUploadedFileTypeTable().getUploadedFileTypeObject(raw));
  }


 /**
  * Retrieves the <code>Type</code> object reffered to.
  *  
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @throws NoSuchRowPoemException  
  *         if the <Persistent</code> has yet to be allocated a TROID 
  * @return the <code>Type</code> as a <code>UploadedFileType</code> 
  */
  public UploadedFileType getType()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getTypeTroid();
    return troid == null ? null :
        getSiteDatabaseTables().getUploadedFileTypeTable().getUploadedFileTypeObject(troid);
  }


 /**
  * Set the Type.
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>UploadedFileType</code>
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  */
  public void setType(UploadedFileType cooked)
      throws AccessPoemException {
    _getUploadedFileTable().
      getTypeColumn().
        getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setType_unsafe(null);
    else {
      cooked.existenceLock();
      setType_unsafe(cooked.troid());
    }
  }


 /**
  * Retrieves the <code>Type</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer type
  */
  public Field getTypeField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getTypeColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Description</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String description
  */
  public String getDescription_unsafe() {
    return description;
  }


 /**
  * Sets the <code>Description</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setDescription_unsafe(String cooked) {
    description = cooked;
  }

 /**
  * Retrieves the Description value, with locking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   A description of the file 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Description</code> for this 
  *         <code>UploadedFile</code> <code>Persistent</code>  
  */

  public String getDescription()
      throws AccessPoemException {
    readLock();
    return getDescription_unsafe();
  }


 /**
  * Sets the <code>Description</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   A description of the file 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setDescription(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUploadedFileTable().getDescriptionColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setDescription_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Description</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String description
  */
  public Field getDescriptionField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getDescriptionColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Size</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer size
  */
  public Integer getSize_unsafe() {
    return size;
  }


 /**
  * Sets the <code>Size</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setSize_unsafe(Integer cooked) {
    size = cooked;
  }

 /**
  * Retrieves the Size value, with locking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The size of this file 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Size</code> for this 
  *         <code>UploadedFile</code> <code>Persistent</code>  
  */

  public Integer getSize()
      throws AccessPoemException {
    readLock();
    return getSize_unsafe();
  }


 /**
  * Sets the <code>Size</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The size of this file 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setSize(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUploadedFileTable().getSizeColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setSize_unsafe(cooked);
  }

 /**
  * Sets the <code>Size</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The size of this file 
  * 
  * 
  * @generator org.melati.poem.prepro.IntegerFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>int</code>
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */

  public final void setSize(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setSize(new Integer(cooked));
  }


 /**
  * Retrieves the <code>Size</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer size
  */
  public Field getSizeField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getSizeColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>When</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Date when
  */
  public Date getWhen_unsafe() {
    return when;
  }


 /**
  * Sets the <code>When</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setWhen_unsafe(Date cooked) {
    when = cooked;
  }

 /**
  * Retrieves the When value, with locking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The date on which this file was uploaded 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>When</code> for this 
  *         <code>UploadedFile</code> <code>Persistent</code>  
  */

  public Date getWhen()
      throws AccessPoemException {
    readLock();
    return getWhen_unsafe();
  }


 /**
  * Sets the <code>When</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The date on which this file was uploaded 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setWhen(Date cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUploadedFileTable().getWhenColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setWhen_unsafe(cooked);
  }


 /**
  * Retrieves the <code>When</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Date when
  */
  public Field getWhenField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getWhenColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Uploadedby</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer uploadedby
  */
  public Integer getUploadedby_unsafe() {
    return uploadedby;
  }


 /**
  * Sets the <code>Uploadedby</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setUploadedby_unsafe(Integer cooked) {
    uploadedby = cooked;
  }

 /**
  * Retrieves the Table Row Object ID. 
  *
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @return the TROID as an <code>Integer</code> 
  */

  public Integer getUploadedbyTroid()
      throws AccessPoemException {
    readLock();
    return getUploadedby_unsafe();
  }


 /**
  * Sets the Table Row Object ID. 
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param raw  a Table Row Object Id 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  */
  public void setUploadedbyTroid(Integer raw)
      throws AccessPoemException {
    setUploadedby(raw == null ? null : 
        getSiteDatabaseTables().getUserTable().getUserObject(raw));
  }


 /**
  * Retrieves the <code>Uploadedby</code> object reffered to.
  *  
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @throws NoSuchRowPoemException  
  *         if the <Persistent</code> has yet to be allocated a TROID 
  * @return the <code>Uploadedby</code> as a <code>User</code> 
  */
  public User getUploadedby()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getUploadedbyTroid();
    return troid == null ? null :
        getSiteDatabaseTables().getUserTable().getUserObject(troid);
  }


 /**
  * Set the Uploadedby.
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>User</code>
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  */
  public void setUploadedby(User cooked)
      throws AccessPoemException {
    _getUploadedFileTable().
      getUploadedbyColumn().
        getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setUploadedby_unsafe(null);
    else {
      cooked.existenceLock();
      setUploadedby_unsafe(cooked.troid());
    }
  }


 /**
  * Retrieves the <code>Uploadedby</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer uploadedby
  */
  public Field getUploadedbyField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getUploadedbyColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Deleted</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Boolean deleted
  */
  public Boolean getDeleted_unsafe() {
    return deleted;
  }


 /**
  * Sets the <code>Deleted</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setDeleted_unsafe(Boolean cooked) {
    deleted = cooked;
  }

 /**
  * Retrieves the Deleted value, with locking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   Whether this file been deleted or not 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Deleted</code> for this 
  *         <code>UploadedFile</code> <code>Persistent</code>  
  */

  public Boolean getDeleted()
      throws AccessPoemException {
    readLock();
    return getDeleted_unsafe();
  }


 /**
  * Sets the <code>Deleted</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   Whether this file been deleted or not 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setDeleted(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUploadedFileTable().getDeletedColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setDeleted_unsafe(cooked);
  }

 /**
  * Sets the <code>Deleted</code> value, with checking, 
  * from a <code>boolean</code>, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   Whether this file been deleted or not 
  * 
  * 
  * @generator org.melati.poem.prepro.BooleanFieldDef#generateBaseMethods 
  * @param cooked  a <code>boolean</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */

  public final void setDeleted(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setDeleted(cooked ? Boolean.TRUE : Boolean.FALSE);
  }


 /**
  * Retrieves the <code>Deleted</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Boolean deleted
  */
  public Field getDeletedField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getDeletedColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Displayname</code> value, without locking, 
  * for this <code>UploadedFile</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String displayname
  */
  public String getDisplayname_unsafe() {
    return displayname;
  }


 /**
  * Sets the <code>Displayname</code> value directly, without checking, 
  * for this UploadedFile <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setDisplayname_unsafe(String cooked) {
    displayname = cooked;
  }

 /**
  * Retrieves the Displayname value, with locking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The layout's name 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Displayname</code> for this 
  *         <code>UploadedFile</code> <code>Persistent</code>  
  */

  public String getDisplayname()
      throws AccessPoemException {
    readLock();
    return getDisplayname_unsafe();
  }


 /**
  * Sets the <code>Displayname</code> value, with checking, for this 
  * <code>UploadedFile</code> <code>Persistent</code>.
  * Field description: 
  *   The layout's name 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setDisplayname(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUploadedFileTable().getDisplaynameColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setDisplayname_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Displayname</code> value as a <code>Field</code>
  * from this <code>UploadedFile</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String displayname
  */
  public Field getDisplaynameField() throws AccessPoemException {
    Column c = _getUploadedFileTable().getDisplaynameColumn();
    return new Field(c.getRaw(this), c);
  }
}

