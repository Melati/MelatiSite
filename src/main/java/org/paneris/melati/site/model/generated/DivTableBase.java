// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.site.model.generated;

import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Database;
import org.melati.poem.DefinitionSource;
import org.melati.poem.DisplayLevel;
import org.melati.poem.Field;
import org.melati.poem.IntegerPoemType;
import org.melati.poem.JdbcPersistent;
import org.melati.poem.Persistent;
import org.melati.poem.PoemException;
import org.melati.poem.ReferencePoemType;
import org.melati.poem.Searchability;
import org.melati.poem.StandardIntegrityFix;
import org.melati.poem.StringPoemType;
import org.melati.poem.TroidPoemType;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.site.model.Div;
import org.paneris.melati.site.model.Page;
import org.paneris.melati.site.model.SiteDatabaseTables;
import org.paneris.melati.site.model.SiteTable;
import org.paneris.melati.site.model.Style;
import org.paneris.melati.site.model.UploadedImage;


/**
 * Melati POEM generated base class for 
<code>Table</code> <code>Div</code>.
 *
 * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
 */

public class DivTableBase extends SiteTable {

  private Column col_id = null;
  private Column col_page = null;
  private Column col_displayorder = null;
  private Column col_style = null;
  private Column col_title = null;
  private Column col_content = null;
  private Column col_image = null;

 /**
  * Constructor. 
  * 
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param database          the POEM database we are using
  * @param name              the name of this <code>Table</code>
  * @param definitionSource  which definition is being used
  * @throws PoemException    if anything goes wrong
  */

  public DivTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }


 /**
  * Get the database tables.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @return the database tables
  */
  public SiteDatabaseTables getSiteDatabaseTables() {
    return (SiteDatabaseTables)getDatabase();
  }

  public void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id",
                   new TroidPoemType(),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setId((Integer)raw);
          }
        });

    defineColumn(col_page =
        new Column(this, "page",
                   new ReferencePoemType(getSiteDatabaseTables().
                                             getPageTable(), true),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getPage();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setPage((Page)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getPageField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The Page to which this fragment belongs";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getPage_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setPage_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getPageTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setPageTroid((Integer)raw);
          }
        });

    defineColumn(col_displayorder =
        new Column(this, "displayorder",
                   new IntegerPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getDisplayorder();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setDisplayorder((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getDisplayorderField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected String defaultDisplayName() {
            return "Display order";
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "A rank determining where the div appears in a page";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getDisplayorder_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setDisplayorder_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getDisplayorder();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setDisplayorder((Integer)raw);
          }
        });

    defineColumn(col_style =
        new Column(this, "style",
                   new ReferencePoemType(getSiteDatabaseTables().
                                             getStyleTable(), true),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getStyle();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setStyle((Style)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getStyleField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "The name of the CSS class for this DIV";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getStyle_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setStyle_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getStyleTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setStyleTroid((Integer)raw);
          }
        });

    defineColumn(col_title =
        new Column(this, "title",
                   new StringPoemType(true, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getTitle();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setTitle((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getTitleField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.primary;
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "The HTML title";
          }

          protected int defaultWidth() {
            return 60;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getTitle_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setTitle_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getTitle();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setTitle((String)raw);
          }
        });

    defineColumn(col_content =
        new Column(this, "content",
                   new StringPoemType(true, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getContent();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setContent((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getContentField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "The HTML content";
          }

          protected int defaultWidth() {
            return 60;
          }

          protected int defaultHeight() {
            return 20;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getContent_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setContent_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getContent();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setContent((String)raw);
          }
        });

    defineColumn(col_image =
        new Column(this, "image",
                   new ReferencePoemType(getSiteDatabaseTables().
                                             getUploadedImageTable(), true),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Div)g).getImage();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Div)g).setImage((UploadedImage)cooked);
          }

          public Field asField(Persistent g) {
            return ((Div)g).getImageField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Image";
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "Image associated with this div";
          }

          protected int defaultWidth() {
            return 1;
          }

          protected int defaultHeight() {
            return 1;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getImage_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setImage_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Div)g).getImageTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Div)g).setImageTroid((Integer)raw);
          }

          public StandardIntegrityFix defaultIntegrityFix() {
            return StandardIntegrityFix.clear;
          }
        });
  }


 /**
  * Retrieves the <code>Id</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the id <code>Column</code>
  */
  public final Column getIdColumn() {
    return col_id;
  }


 /**
  * Retrieves the <code>Page</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the page <code>Column</code>
  */
  public final Column getPageColumn() {
    return col_page;
  }


 /**
  * Retrieves the <code>Displayorder</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the displayorder <code>Column</code>
  */
  public final Column getDisplayorderColumn() {
    return col_displayorder;
  }


 /**
  * Retrieves the <code>Style</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the style <code>Column</code>
  */
  public final Column getStyleColumn() {
    return col_style;
  }


 /**
  * Retrieves the <code>Title</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the title <code>Column</code>
  */
  public final Column getTitleColumn() {
    return col_title;
  }


 /**
  * Retrieves the <code>Content</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the content <code>Column</code>
  */
  public final Column getContentColumn() {
    return col_content;
  }


 /**
  * Retrieves the <code>Image</code> <code>Column</code> for this 
  * <code>Div</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the image <code>Column</code>
  */
  public final Column getImageColumn() {
    return col_image;
  }


 /**
  * Retrieve the <code>Div</code> as a <code>Div</code>.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Oject ID
  * @return the <code>Persistent</code> identified by the <code>troid</code>
  */
  public Div getDivObject(Integer troid) {
    return (Div)getObject(troid);
  }


 /**
  * Retrieve the <code>Div</code> 
  * as a <code>Div</code>.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified   */
  public Div getDivObject(int troid) {
    return (Div)getObject(troid);
  }

  protected JdbcPersistent _newPersistent() {
    return new Div();
  }
  protected String defaultDescription() {
    return "An HTML fragment";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected String defaultCategory() {
    return "Data";
  }

  protected int defaultDisplayOrder() {
    return 550;
  }
}

