// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.site.model.generated;


import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.NoSuchRowPoemException;
import org.melati.poem.Persistent;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.site.model.DivTable;
import org.paneris.melati.site.model.Page;
import org.paneris.melati.site.model.SiteDatabaseTables;
import org.paneris.melati.site.model.Style;


/**
 * Melati POEM generated abstract base class for a <code>Persistent</code> 
 * <code>Div</code> Object.
 *
 * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
 */
public abstract class DivBase extends Persistent {


 /**
  * Retrieves the Database object.
  * 
  * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
  * @return the database
  */
  public SiteDatabaseTables getSiteDatabaseTables() {
    return (SiteDatabaseTables)getDatabase();
  }


 /**
  * Retrieves the  <code>DivTable</code> table 
  * which this <code>Persistent</code> is from.
  * 
  * @generator org.melati.poem.prepro.TableDef#generateBaseJava 
  * @return the DivTable
  */
  public DivTable getDivTable() {
    return (DivTable)getTable();
  }

  private DivTable _getDivTable() {
    return (DivTable)getTable();
  }

  // Fields in this table 
 /**
  * id 
  */
  protected Integer id;
 /**
  * page - The Page to which this fragment belongs 
  */
  protected Integer page;
 /**
  * Display order - A rank determining where the div appears in a page 
  */
  protected Integer displayorder;
 /**
  * style - The name of the CSS class for this DIV 
  */
  protected Integer style;
 /**
  * title - The HTML title 
  */
  protected String title;
 /**
  * content - The HTML content 
  */
  protected String content;


 /**
  * Retrieves the <code>Id</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer id
  */
  public Integer getId_unsafe() {
    return id;
  }


 /**
  * Sets the <code>Id</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

 /**
  * Retrieves the Id value, with locking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Id</code> for this 
  *         <code>Div</code> <code>Persistent</code>  
  */

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }


 /**
  * Sets the <code>Id</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getDivTable().getIdColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

 /**
  * Sets the <code>Id</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.IntegerFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>int</code>
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }


 /**
  * Retrieves the <code>Id</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer id
  */
  public Field getIdField() throws AccessPoemException {
    Column c = _getDivTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Page</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer page
  */
  public Integer getPage_unsafe() {
    return page;
  }


 /**
  * Sets the <code>Page</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setPage_unsafe(Integer cooked) {
    page = cooked;
  }

 /**
  * Retrieves the Table Row Object ID. 
  *
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @return the TROID as an <code>Integer</code> 
  */

  public Integer getPageTroid()
      throws AccessPoemException {
    readLock();
    return getPage_unsafe();
  }


 /**
  * Sets the Table Row Object ID. 
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param raw  a Table Row Object Id 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  */
  public void setPageTroid(Integer raw)
      throws AccessPoemException {
    setPage(raw == null ? null : 
        getSiteDatabaseTables().getPageTable().getPageObject(raw));
  }


 /**
  * Retrieves the <code>Page</code> object reffered to.
  *  
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @throws NoSuchRowPoemException  
  *         if the <Persistent</code> has yet to be allocated a TROID 
  * @return the <code>Page</code> as a <code>Page</code> 
  */
  public Page getPage()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getPageTroid();
    return troid == null ? null :
        getSiteDatabaseTables().getPageTable().getPageObject(troid);
  }


 /**
  * Set the Page.
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>Page</code>
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  */
  public void setPage(Page cooked)
      throws AccessPoemException {
    _getDivTable().
      getPageColumn().
        getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setPage_unsafe(null);
    else {
      cooked.existenceLock();
      setPage_unsafe(cooked.troid());
    }
  }


 /**
  * Retrieves the <code>Page</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer page
  */
  public Field getPageField() throws AccessPoemException {
    Column c = _getDivTable().getPageColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Displayorder</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer displayorder
  */
  public Integer getDisplayorder_unsafe() {
    return displayorder;
  }


 /**
  * Sets the <code>Displayorder</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setDisplayorder_unsafe(Integer cooked) {
    displayorder = cooked;
  }

 /**
  * Retrieves the Displayorder value, with locking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   A rank determining where the div appears in a page 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Displayorder</code> for this 
  *         <code>Div</code> <code>Persistent</code>  
  */

  public Integer getDisplayorder()
      throws AccessPoemException {
    readLock();
    return getDisplayorder_unsafe();
  }


 /**
  * Sets the <code>Displayorder</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   A rank determining where the div appears in a page 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setDisplayorder(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getDivTable().getDisplayorderColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setDisplayorder_unsafe(cooked);
  }

 /**
  * Sets the <code>Displayorder</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   A rank determining where the div appears in a page 
  * 
  * 
  * @generator org.melati.poem.prepro.IntegerFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>int</code>
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */

  public final void setDisplayorder(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setDisplayorder(new Integer(cooked));
  }


 /**
  * Retrieves the <code>Displayorder</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer displayorder
  */
  public Field getDisplayorderField() throws AccessPoemException {
    Column c = _getDivTable().getDisplayorderColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Style</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer style
  */
  public Integer getStyle_unsafe() {
    return style;
  }


 /**
  * Sets the <code>Style</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setStyle_unsafe(Integer cooked) {
    style = cooked;
  }

 /**
  * Retrieves the Table Row Object ID. 
  *
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @return the TROID as an <code>Integer</code> 
  */

  public Integer getStyleTroid()
      throws AccessPoemException {
    readLock();
    return getStyle_unsafe();
  }


 /**
  * Sets the Table Row Object ID. 
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param raw  a Table Row Object Id 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  */
  public void setStyleTroid(Integer raw)
      throws AccessPoemException {
    setStyle(raw == null ? null : 
        getSiteDatabaseTables().getStyleTable().getStyleObject(raw));
  }


 /**
  * Retrieves the <code>Style</code> object reffered to.
  *  
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer read access rights 
  * @throws NoSuchRowPoemException  
  *         if the <Persistent</code> has yet to be allocated a TROID 
  * @return the <code>Style</code> as a <code>Style</code> 
  */
  public Style getStyle()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getStyleTroid();
    return troid == null ? null :
        getSiteDatabaseTables().getStyleTable().getStyleObject(troid);
  }


 /**
  * Set the Style.
  * 
  * @generator org.melati.poem.prepro.ReferenceFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>Style</code>
  * @throws AccessPoemException  
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  */
  public void setStyle(Style cooked)
      throws AccessPoemException {
    _getDivTable().
      getStyleColumn().
        getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setStyle_unsafe(null);
    else {
      cooked.existenceLock();
      setStyle_unsafe(cooked.troid());
    }
  }


 /**
  * Retrieves the <code>Style</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer style
  */
  public Field getStyleField() throws AccessPoemException {
    Column c = _getDivTable().getStyleColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Title</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String title
  */
  public String getTitle_unsafe() {
    return title;
  }


 /**
  * Sets the <code>Title</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setTitle_unsafe(String cooked) {
    title = cooked;
  }

 /**
  * Retrieves the Title value, with locking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   The HTML title 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Title</code> for this 
  *         <code>Div</code> <code>Persistent</code>  
  */

  public String getTitle()
      throws AccessPoemException {
    readLock();
    return getTitle_unsafe();
  }


 /**
  * Sets the <code>Title</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   The HTML title 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setTitle(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getDivTable().getTitleColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setTitle_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Title</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String title
  */
  public Field getTitleField() throws AccessPoemException {
    Column c = _getDivTable().getTitleColumn();
    return new Field(c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Content</code> value, without locking, 
  * for this <code>Div</code> <code>Persistent</code>.
  *
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String content
  */
  public String getContent_unsafe() {
    return content;
  }


 /**
  * Sets the <code>Content</code> value directly, without checking, 
  * for this Div <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setContent_unsafe(String cooked) {
    content = cooked;
  }

 /**
  * Retrieves the Content value, with locking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   The HTML content 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Content</code> for this 
  *         <code>Div</code> <code>Persistent</code>  
  */

  public String getContent()
      throws AccessPoemException {
    readLock();
    return getContent_unsafe();
  }


 /**
  * Sets the <code>Content</code> value, with checking, for this 
  * <code>Div</code> <code>Persistent</code>.
  * Field description: 
  *   The HTML content 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setContent(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getDivTable().getContentColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setContent_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Content</code> value as a <code>Field</code>
  * from this <code>Div</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String content
  */
  public Field getContentField() throws AccessPoemException {
    Column c = _getDivTable().getContentColumn();
    return new Field(c.getRaw(this), c);
  }
}

