// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.site.model.generated;


import java.sql.Date;
import org.melati.poem.AccessPoemException;
import org.melati.poem.BooleanPoemType;
import org.melati.poem.Column;
import org.melati.poem.Database;
import org.melati.poem.DatePoemType;
import org.melati.poem.DefinitionSource;
import org.melati.poem.DisplayLevel;
import org.melati.poem.Field;
import org.melati.poem.IntegerPoemType;
import org.melati.poem.Persistent;
import org.melati.poem.PoemException;
import org.melati.poem.ReferencePoemType;
import org.melati.poem.Searchability;
import org.melati.poem.StandardIntegrityFix;
import org.melati.poem.StringPoemType;
import org.melati.poem.User;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.site.model.SiteDatabaseTables;
import org.paneris.melati.site.model.SiteTable;
import org.paneris.melati.site.model.UploadedFile;
import org.paneris.melati.site.model.UploadedFileType;


/**
 * Melati POEM generated base class for 
<code>Table</code> <code>UploadedFile</code>.
 *
 * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
 */

public class UploadedFileTableBase extends SiteTable {

  private Column<Integer> col_type = null;
  private Column<String> col_description = null;
  private Column<Integer> col_size = null;
  private Column<Date> col_when = null;
  private Column<Integer> col_uploadedby = null;
  private Column<Boolean> col_deleted = null;
  private Column<String> col_displayname = null;

 /**
  * Constructor. 
  * 
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param database          the POEM database we are using
  * @param name              the name of this <code>Table</code>
  * @param definitionSource  which definition is being used
  * @throws PoemException    if anything goes wrong
  */

  public UploadedFileTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }


 /**
  * Get the database tables.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @return the database tables
  */
  public SiteDatabaseTables getSiteDatabaseTables() {
    return (SiteDatabaseTables)getDatabase();
  }

  public void init() throws PoemException {
    super.init();
    defineColumn(col_type =
        new Column<Integer>(this, "type",
                   new ReferencePoemType(getSiteDatabaseTables().
                                             getUploadedFileTypeTable(), false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getType();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setType((UploadedFileType)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((UploadedFile)g).getTypeField();
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          protected String defaultDescription() {
            return "The type of this file";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getType_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setType_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getTypeTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setTypeTroid((Integer)raw);
          }

          public StandardIntegrityFix defaultIntegrityFix() {
            return StandardIntegrityFix.prevent;
          }
        });

    defineColumn(col_description =
        new Column<String>(this, "description",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getDescription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setDescription((String)cooked);
          }

          public Field<String> asField(Persistent g) {
            return ((UploadedFile)g).getDescriptionField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "A description of the file";
          }

          protected int defaultWidth() {
            return 60;
          }

          protected int defaultHeight() {
            return 5;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDescription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDescription_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDescription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDescription((String)raw);
          }
        });

    defineColumn(col_size =
        new Column<Integer>(this, "size",
                   new IntegerPoemType(true),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getSize();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setSize((Integer)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((UploadedFile)g).getSizeField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "The size of this file";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getSize_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setSize_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getSize();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setSize((Integer)raw);
          }
        });

    defineColumn(col_when =
        new Column<Date>(this, "when",
                   new DatePoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getWhen();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setWhen((Date)cooked);
          }

          public Field<Date> asField(Persistent g) {
            return ((UploadedFile)g).getWhenField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "The date on which this file was uploaded";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getWhen_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setWhen_unsafe((Date)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getWhen();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setWhen((Date)raw);
          }
        });

    defineColumn(col_uploadedby =
        new Column<Integer>(this, "uploadedby",
                   new ReferencePoemType(getSiteDatabaseTables().
                                             getUserTable(), false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getUploadedby();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setUploadedby((User)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((UploadedFile)g).getUploadedbyField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Uploaded By";
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "The user who uploaded this file";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getUploadedby_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setUploadedby_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getUploadedbyTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setUploadedbyTroid((Integer)raw);
          }
        });

    defineColumn(col_deleted =
        new Column<Boolean>(this, "deleted",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getDeleted();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setDeleted((Boolean)cooked);
          }

          public Field<Boolean> asField(Persistent g) {
            return ((UploadedFile)g).getDeletedField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "Whether this file been deleted or not";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDeleted_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDeleted_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDeleted();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDeleted((Boolean)raw);
          }
        });

    defineColumn(col_displayname =
        new Column<String>(this, "displayname",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((UploadedFile)g).getDisplayname();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((UploadedFile)g).setDisplayname((String)cooked);
          }

          public Field<String> asField(Persistent g) {
            return ((UploadedFile)g).getDisplaynameField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.primary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected String defaultDisplayName() {
            return "Display name";
          }

          protected int defaultDisplayOrder() {
            return 6;
          }

          protected String defaultDescription() {
            return "The layout's name";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDisplayname_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDisplayname_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((UploadedFile)g).getDisplayname();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((UploadedFile)g).setDisplayname((String)raw);
          }
        });
  }


 /**
  * Retrieves the <code>Type</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the type <code>Column</code>
  */
  public final Column<Integer> getTypeColumn() {
    return col_type;
  }


 /**
  * Retrieves the <code>Description</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the description <code>Column</code>
  */
  public final Column<String> getDescriptionColumn() {
    return col_description;
  }


 /**
  * Retrieves the <code>Size</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the size <code>Column</code>
  */
  public final Column<Integer> getSizeColumn() {
    return col_size;
  }


 /**
  * Retrieves the <code>When</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the when <code>Column</code>
  */
  public final Column<Date> getWhenColumn() {
    return col_when;
  }


 /**
  * Retrieves the <code>Uploadedby</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the uploadedby <code>Column</code>
  */
  public final Column<Integer> getUploadedbyColumn() {
    return col_uploadedby;
  }


 /**
  * Retrieves the <code>Deleted</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the deleted <code>Column</code>
  */
  public final Column<Boolean> getDeletedColumn() {
    return col_deleted;
  }


 /**
  * Retrieves the <code>Displayname</code> <code>Column</code> for this 
  * <code>UploadedFile</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the displayname <code>Column</code>
  */
  public final Column<String> getDisplaynameColumn() {
    return col_displayname;
  }


 /**
  * Retrieve the <code>UploadedFile</code> as a <code>UploadedFile</code>.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Oject ID
  * @return the <code>Persistent</code> identified by the <code>troid</code>
  */
  public UploadedFile getUploadedFileObject(Integer troid) {
    return (UploadedFile)getObject(troid);
  }


 /**
  * Retrieve the <code>UploadedFile</code> 
  * as a <code>UploadedFile</code>.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified   */
  public UploadedFile getUploadedFileObject(int troid) {
    return (UploadedFile)getObject(troid);
  }
  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return new Integer(999999999);
  }

  protected String defaultCategory() {
    return "Data";
  }

  protected int defaultDisplayOrder() {
    return 2;
  }
}

